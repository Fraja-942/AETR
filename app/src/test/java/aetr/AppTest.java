/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aetr;

import aetr.data.RestTime;
import aetr.data.RestTimeList;
import aetr.validate.DailyRestException;
import aetr.validate.RestSubsequence;
import aetr.validate.WeeklyRestException;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.junit.Test;

import java.text.ParseException;
import java.util.List;

import static org.junit.Assert.*;

public class AppTest {
    private JSONArray Data(String[] t){
        JSONArray array = new JSONArray();
        for(int i = 0; i < 3; i++) {
            JSONObject o = new JSONObject();
            if(i % 2 == 0) {
                o.put("action", "driving");
            }else{
                o.put("action", "work");
            }
            o.put("t0", t[2 * i]);
            o.put("t1", t[2 * i + 1]);
            array.add(o);
        }
        return array;
    }

    @Test
    public void testWeeklyRest_0() throws ParseException {
        String[] t = {"11 08 2022 00:00", "11 08 2022 03:00",
                "13 08 2022 00:00", "16 08 2022 12:00",
                "17 08 2022 22:00", "18 08 2022 15:00"};
        RestTimeList restTimeList = new RestTimeList();
        List<RestTime> list = restTimeList.getRestTimeList(Data(t));
        String message = "Ok";
        try {
            RestSubsequence subsequence = new RestSubsequence(list);
            subsequence.validate();
        }catch (WeeklyRestException e){
            message = e.getMessage();
        }
        assertEquals("Ok", message);
    }

    @Test
    public void testWeeklyRest_1() throws ParseException {
        String[] t = {"10 08 2022 00:00", "10 08 2022 03:00",
                "12 08 2022 00:00", "18 08 2022 12:00",
                "20 08 2022 10:00", "20 08 2022 15:00"};
        RestTimeList restTimeList = new RestTimeList();
        List<RestTime> list = restTimeList.getRestTimeList(Data(t));
        String message = null;
        try {
            RestSubsequence subsequence = new RestSubsequence(list);
            subsequence.validate();
        }catch (WeeklyRestException e){
            message = e.getMessage();
        }
        assertEquals("Article 8 (6. a.)", message);
    }

    @Test
    public void testWeeklyRest_2() throws ParseException {
        String[] t = {"07 08 2022 00:00", "07 08 2022 03:00",
                "09 08 2022 00:00", "14 08 2022 12:00",
                "16 08 2022 10:00", "16 08 2022 15:00"};
        RestTimeList restTimeList = new RestTimeList();
        List<RestTime> list = restTimeList.getRestTimeList(Data(t));
        String message = null;
        try {
            RestSubsequence subsequence = new RestSubsequence(list);
            subsequence.validate();
        }catch (WeeklyRestException e){
            message = e.getMessage();
        }
        assertEquals("Article 8 (6. a. ii)", message);
    }

    @Test
    public void testDailyRest_0() throws ParseException {
        String[] t = {"15 08 2022 00:00", "15 08 2022 03:00",
                "15 08 2022 15:00", "15 08 2022 22:00",
                "16 08 2022 11:00", "16 08 2022 16:00"};
        RestTimeList restTimeList = new RestTimeList();
        List<RestTime> list = restTimeList.getRestTimeList(Data(t));
        String message = "Ok";
        try {
            RestSubsequence subsequence = new RestSubsequence(list);
            subsequence.validate();
        }catch (DailyRestException e){
            message = e.getMessage();
        }
        assertEquals("Ok", message);
    }

    @Test
    public void testDailyRest_1() throws ParseException {
        String[] t = {"15 08 2022 00:00", "15 08 2022 03:00",
                "15 08 2022 09:00", "15 08 2022 12:00",
                "16 08 2022 06:00", "16 08 2022 15:00"};
        RestTimeList restTimeList = new RestTimeList();
        List<RestTime> list = restTimeList.getRestTimeList(Data(t));
        String message = null;
        try {
            RestSubsequence subsequence = new RestSubsequence(list);
            subsequence.validate();
        }catch (DailyRestException e){
            message = e.getMessage();
        }
        assertEquals("Article 1 (o) i, (p) ii", message);
    }

    @Test
    public void testDailyRest_2() throws ParseException {
        String[] t = {"15 08 2022 00:00", "15 08 2022 03:00",
                "15 08 2022 13:00", "16 08 2022 06:00",
                "16 08 2022 16:00", "16 08 2022 22:00"};
        RestTimeList restTimeList = new RestTimeList();
        List<RestTime> list = restTimeList.getRestTimeList(Data(t));
        String message = null;
        try {
            RestSubsequence subsequence = new RestSubsequence(list);
            subsequence.validate();
        }catch (DailyRestException e){
            message = e.getMessage();
        }
        assertEquals("Article 8 (2)", message);
    }

    @Test
    public void testDailyRest_3() throws ParseException {
        String[] t = {"15 08 2022 00:00", "15 08 2022 03:00",
                "15 08 2022 07:00", "15 08 2022 14:00",
                "15 08 2022 18:00", "15 08 2022 23:00"};
        RestTimeList restTimeList = new RestTimeList();
        List<RestTime> list = restTimeList.getRestTimeList(Data(t));
        String message = null;
        try {
            RestSubsequence subsequence = new RestSubsequence(list);
            subsequence.validate();
        }catch (DailyRestException e){
            message = e.getMessage();
        }
        assertEquals("Article 1 (o) i", message);
    }

    @Test
    public void testDailyRest_4() throws ParseException {
        String[] t = {"15 08 2022 00:00", "15 08 2022 03:00",
                "15 08 2022 07:00", "15 08 2022 23:00",
                "16 08 2022 09:00", "16 08 2022 15:00"};
        RestTimeList restTimeList = new RestTimeList();
        List<RestTime> list = restTimeList.getRestTimeList(Data(t));
        String message = null;
        try {
            RestSubsequence subsequence = new RestSubsequence(list);
            subsequence.validate();
        }catch (DailyRestException e){
            message = e.getMessage();
        }
        assertEquals("Article 1 (o) i", message);
    }
}
